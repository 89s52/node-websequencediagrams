#!/usr/bin/env node
// -*- js -*-
'use strict';

var opt = require('optimist');
var fs  = require('fs');
var wsd = require('../lib/wsd');

var argv = opt
    .usage('Generate a diagram with websequencediagrams.com')
    .boolean('h')
    .alias('h', 'help')
    .describe('h', 'Show help')
    .string('f')
    .alias('f', 'format')
    .describe('f', 'Format for output (one of [png, pdf, svg])')
    .default('f', 'png')
    .string('o')
    .alias('o', 'output')
    .describe('o', 'Output file (defaults to wsd.[png, pdf, svg])')
    .string('s')
    .alias('s', 'style')
    .describe('s', 'Output style (one of: [' + wsd.styles.join(', ') + '])')
    .wrap(80)
    .argv;

if (argv.h) {
  opt.showHelp();
  process.exit(64);
}

var files = argv._;
if (files.length === 0) {
  files = ['-'];
}

files.forEach(function(f) {
  let stream;
  const bufs = [];
  if (f === '-') {
    stream = process.stdin;
    process.stdin.resume();
  } else {
    stream = fs.createReadStream(f);
  }
  stream.on('error', function(er) {
    console.log(er);
  });
  stream.on('data', function(data) {
    bufs.push(data);
  });
  stream.on('end', function() {
    wsd.diagram(Buffer.concat(bufs), argv.s, argv.f, (er, buf, typ) => {
      if (er) {
        console.error(er.message || er);
        process.exit(1);
      }
      var output = argv.o;
      if (!output) {
        switch (typ) {
          case 'image/png':
            output = 'wsd.png';
            break;
          case 'application/pdf':
            output = 'wsd.pdf';
            break;
          case 'image/svg+xml':
            output = 'wsd.svg';
            break;
          default:
            console.error('Unknown file MIME type: ' + typ);
            return;
        }
      }

      fs.writeFile(output, buf, (er) => {
        if (er) {
          console.error(er.message || er);
          process.exit(1);
        }
      });
    });
  });
});
